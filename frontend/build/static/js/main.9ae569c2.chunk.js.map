{"version":3,"sources":["components/Nav/Nav.js","components/Books/Books.js","components/Issue/Issue.js","components/Return/Return.js","components/search/search.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","state","update","bind","this","setState","id","style","window","location","pathname","display","to","onClick","React","Component","Books","header","scope","books","fetch","then","res","json","map","el","count","key","name","toUpperCase","author","semester","className","fetchData","sem","document","getElementById","value","forEach","issueIt","method","headers","body","JSON","stringify","sid","parseInt","disabled","type","placeholder","min","onChange","componentDidMount","Return","length","sname","date","deadline","returnIt","student","App","path","exact","strict","component","Issue","Search","from","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ae569c2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Nav.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Nav extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.update = this.update.bind(this);\r\n    }\r\n\r\n    state = {};\r\n\r\n    update() {\r\n        this.setState(this.state);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div id='nav'>\r\n                <span>LIBRARY MANAGEMENT SYSTEM</span>\r\n                <ul>\r\n                    <li style={window.location.pathname === '/' ? {display: 'none'} : {display: 'inline-block'}}><Link to='/' onClick={this.update}>Home</Link></li>\r\n                    <li style={window.location.pathname === '/issue' ? {display: 'none'} : {display: 'inline-block'}}><Link to='/issue' onClick={this.update}>Issue Book</Link></li>\r\n                    <li style={window.location.pathname === '/return' ? {display: 'none'} : {display: 'inline-block'}}><Link to='/return' onClick={this.update}>Return Book</Link></li>\r\n                    <li style={window.location.pathname === '/search' ? {display: 'none'} : {display: 'inline-block'}}><Link to='/search' onClick={this.update}>Search</Link></li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './Books.css';\r\n\r\nclass Books extends React.Component {\r\n    \r\n    state = {\r\n        header: <thead id=\"header\">\r\n                    <tr>\r\n                        <th scope=\"col\">Book Name</th>\r\n                        <th scope=\"col\">Author</th>\r\n                        <th scope=\"col\">Total Count</th>\r\n                        <th scope=\"col\">Semester No</th>\r\n                    </tr>\r\n                </thead>,\r\n        books: []\r\n    };\r\n\r\n    async componentDidMount() {\r\n        await fetch(\"/api/getBooks\")\r\n            .then(res => res.json())\r\n            .then(books => {\r\n                books.map(\r\n                    el => {\r\n                        if(el.count > 0) {\r\n                            this.setState({\r\n                                books: [...this.state.books, \r\n                                    <tr key={el.id}>\r\n                                        <td>{el.name.toUpperCase()}</td>\r\n                                        <td>{el.author}</td>\r\n                                        <td>{el.count}</td>\r\n                                        <td>{el.semester}</td>\r\n                                    </tr>]\r\n                            })\r\n                        }\r\n                        return el;\r\n                    })\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='books'>\r\n                <span id=\"heading\">AVAILABLE BOOKS</span>\r\n                <table id=\"results\" className=\"table text-center table-hover\">\r\n                    {this.state.header}\r\n                    <tbody>\r\n                        {this.state.books}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Books;","import React from 'react';\r\nimport './Issue.css';\r\n\r\nclass Books extends React.Component {\r\n    \r\n    state = {\r\n        header: <thead></thead>,\r\n        books: []\r\n    };\r\n\r\n    fetchData = () => {\r\n        var sem = document.getElementById('select').value;\r\n        this.setState({header: <thead id=\"header\">\r\n                        <tr>\r\n                            <th scope=\"col\">Book Name</th>\r\n                            <th scope=\"col\">Author</th>\r\n                            <th scope=\"col\">Semester No</th>\r\n                            <th scope=\"col\"></th>\r\n                        </tr>\r\n                    </thead>,\r\n            books: []});\r\n\r\n        fetch(`/api/getBooks/${sem}`)\r\n            .then(res => res.json())\r\n            .then(books =>\r\n                books.forEach(\r\n                    el => this.setState({\r\n                        books: [...this.state.books, \r\n                                <tr key={el.id}>\r\n                                    <td>{el.name.toUpperCase()}</td>\r\n                                    <td>{el.author}</td>\r\n                                    <td>{el.semester}</td>\r\n                                    <td><button className=\"btn btn-primary\" onClick={() => this.issueIt(el)}>Issue</button></td>\r\n                                </tr>]\r\n                    })));\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if(document.getElementById('id').value === '')\r\n            document.getElementById('select').disabled = true;\r\n        else\r\n            document.getElementById('select').disabled = false;\r\n    }\r\n\r\n    issueIt = el => {\r\n        fetch('/api/borrow', {\r\n                method: 'post',\r\n                headers: {'Content-Type':'application/json'},\r\n                body: JSON.stringify({\r\n                    ...el,\r\n                    sid: parseInt(document.getElementById('id').value)\r\n                })\r\n           });\r\n           /*.then(res => {\r\n                fetch('/api/borrowed')\r\n                .then(res => res.json())\r\n                .then(e => console.log(e));\r\n           });*/\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='issue' className=\"text-center\">\r\n                <div>\r\n                    <input className=\"form-control sel\" type=\"number\" placeholder=\"Enter Student ID\" id=\"id\" min=\"1\" onChange={this.componentDidMount}></input>\r\n                    <select className=\"form-control sel\" id=\"select\">\r\n                        <option disabled>Select Semester</option>\r\n                        <option value=\"1\">1st Sem</option>\r\n                        <option value=\"2\">2nd Sem</option>\r\n                        <option value=\"3\">3rd Sem</option>\r\n                        <option value=\"4\">4th Sem</option>\r\n                        <option value=\"5\">5th Sem</option>\r\n                        <option value=\"6\">6th Sem</option>\r\n                        <option value=\"7\">7th Sem</option>\r\n                        <option value=\"8\">8th Sem</option>\r\n                    </select>\r\n                    <button className=\"btn btn-success\" onClick={this.fetchData}>Submit</button>\r\n                </div>\r\n                <table id=\"results\" className=\"table table-hover\">\r\n                    {this.state.header}\r\n                    <tbody>\r\n                        {this.state.books}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Books;","import React from 'react';\r\nimport './Return.css';\r\n\r\nclass Return extends React.Component {\r\n    \r\n    state = {\r\n        header: <thead></thead>,\r\n        books: [],\r\n        name: ''\r\n    };\r\n\r\n    fetchData = () => {\r\n        var sid = document.getElementById('sid').value;\r\n        this.setState({header: <thead id=\"header\">\r\n                        <tr>\r\n                            <th scope=\"col\">Book Name</th>\r\n                            <th scope=\"col\">Author</th>\r\n                            <th scope=\"col\">Semester No</th>\r\n                            <th scope=\"col\">Issue Date</th>\r\n                            <th scope=\"col\">Return Deadline</th>\r\n                            <th scope=\"col\"></th>\r\n                        </tr>\r\n                    </thead>,\r\n            books: []});\r\n\r\n        fetch(`/api/getIssues/${sid}`)\r\n            .then(res => res.json())\r\n            .then(books => {\r\n                if(books.length > 0) {\r\n                    this.setState({...this.state, name: `Books Issued By ${books[0].sname}`});\r\n                    books.forEach(\r\n                        el => this.setState({\r\n                            books: [...this.state.books, \r\n                                    <tr key={el.id}>\r\n                                        <td>{el.name.toUpperCase()}</td>\r\n                                        <td>{el.author}</td>\r\n                                        <td>{el.semester}</td>\r\n                                        <td>{el.date}</td>\r\n                                        <td>{el.deadline}</td>\r\n                                        <td><button className=\"btn btn-primary\" onClick={() => this.returnIt(el)}>Return</button></td>\r\n                                    </tr>]\r\n                        }))\r\n                }\r\n                else{\r\n                    this.setState({header: []});\r\n                    this.setState({...this.state, name: \"No Books Issued By The Student\"});\r\n                }\r\n                });\r\n    }\r\n\r\n    returnIt = el => {\r\n        fetch('/api/return', {\r\n                method: 'post',\r\n                headers: {'Content-Type':'application/json'},\r\n                body: JSON.stringify({\r\n                    ...el,\r\n                    sid: parseInt(document.getElementById('sid').value)\r\n                })\r\n           });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='return' className=\"text-center\">\r\n                <div>\r\n                    <input className=\"form-control sel\" type=\"number\" placeholder=\"Enter Student ID\" id=\"sid\" min=\"1\"></input>\r\n                    <button className=\"btn btn-success\" onClick={this.fetchData}>Submit</button>\r\n                </div><br/>\r\n                {this.state.name}\r\n                <table id=\"rResults\" className=\"table table-hover\">\r\n                    {this.state.header}\r\n                    <tbody>\r\n                        {this.state.books}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Return;","import React from 'react';\r\nimport './search.css';\r\n\r\nclass Books extends React.Component {\r\n    \r\n    state = {\r\n        header: <thead></thead>,\r\n        books: [],\r\n        name: ''\r\n    };\r\n\r\n    fetchData = () => {\r\n        var id = document.getElementById('id').value;\r\n        this.setState({header: <thead id=\"header\">\r\n                        <tr>\r\n                            <th scope=\"col\">Student Name</th>\r\n                            <th scope=\"col\">Issue Date</th>\r\n                            <th scope=\"col\">Return Deadline</th>\r\n                        </tr>\r\n                    </thead>,\r\n            books: []});\r\n\r\n        fetch(`/api/students/${id}`)\r\n            .then(res => res.json())\r\n            .then(student => {\r\n                if(student.length > 0) {\r\n                    this.setState({...this.state, name: `Following Students Issued This Book`});\r\n                    student.forEach(\r\n                        el => this.setState({\r\n                            books: [...this.state.books, \r\n                                    <tr key={el.id}>\r\n                                        <td>{el.name.toUpperCase()}</td>\r\n                                        <td>{el.date}</td>\r\n                                        <td>{el.deadline}</td>\r\n                                    </tr>]\r\n                        }))\r\n                }\r\n                else{\r\n                    this.setState({header: []});\r\n                    this.setState({...this.state, name: \"No One Have Issued This Book\"});\r\n                }\r\n                });\r\n    }\r\n\r\n    returnIt = el => {\r\n        fetch('/api/return', {\r\n                method: 'post',\r\n                headers: {'Content-Type':'application/json'},\r\n                body: JSON.stringify({\r\n                    ...el,\r\n                    sid: parseInt(document.getElementById('sid').value)\r\n                })\r\n           });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='search' className=\"text-center\">\r\n                <div>\r\n                    <input className=\"form-control sel\" type=\"number\" placeholder=\"Enter Book ID\" id=\"id\" min=\"1\"></input>\r\n                    <button className=\"btn btn-success\" onClick={this.fetchData}>Submit</button>\r\n                </div><br/>\r\n                {this.state.name}\r\n                <table id=\"sResults\" className=\"table table-hover\">\r\n                    {this.state.header}\r\n                    <tbody>\r\n                        {this.state.books}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Books;","import React from 'react';\nimport Nav from './components/Nav/Nav';\nimport Books from './components/Books/Books';\nimport Issue from './components/Issue/Issue';\nimport Return from './components/Return/Return';\nimport Search from './components/search/search';\nimport './App.css';\nimport {Route, Redirect, Switch} from 'react-router-dom';\n\nclass App extends React.Component {\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path='/' exact strict component={Books}/>\n          <Route path='/issue' exact strict component={Issue}/>\n          <Route path='/return' exact strict component={Return}/>\n          <Route path='/search' exact strict component={Search}/>\n          <Redirect from='*' to='/'/>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}